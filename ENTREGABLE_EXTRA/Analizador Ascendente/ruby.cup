/*
    

*/





package analizadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

parser code {:
	
:}

action code {: 
    public static TablaSimbolos tablaSimbolos=TablaSimbolos.getTablaSimbolos();
 :}



terminal Double FLOAT;
terminal COMMA, DOT, SEMICOLON, CRLF,DO;
terminal REQUIRE, END, DEF, RETURN, IF, CASE, WHEN, THEN, ELSE, ELSIF, UNLESS, WHILE, RETRY, BREAK, TRUE, FALSE, PLUS, MINUS, MUL, DIV, MOD, EXP;
terminal EQUAL, NOT_EQUAL, GREATER, LESS ,LESS_EQUAL ,GREATER_EQUAL, ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, MUL_ASSIGN ,DIV_ASSIGN, MOD_ASSIGN, EXP_ASSIGN, BIT_AND, BIT_OR, BIT_XOR, BIT_NOT, BIT_SHL, BIT_SHR, AND, OR, NOT, LEFT_RBRACKET, RIGHT_RBRACKET, LEFT_SBRACKET, RIGHT_SBRACKET;

terminal String ID, ID_GLOBAL, ID_FUNCTION,ID_ITER;
terminal Object NIL;
terminal Integer INT;
terminal String LITERAL;

non terminal prog,
terminator,
single_object,
function_definition,
class_block,
function_definition_header,
array_assignment,
array_definition,
array_definition_elements,
when_statement;


non terminal ArrayList<String> function_definition_params;
non terminal ArrayList<String> function_call;
non terminal ArrayList<String> function_definition_params_list;
non terminal ArrayList<Expresion> expression_list;
non terminal Expresion expression;
non terminal If_statement if_statement;
non terminal If_statement if_elsif_statement ;
non terminal Unless_statement unless_statement;
non terminal ArrayList<Expresion> while_expression_list;
non terminal While_statement while_statement;


non terminal return_statement;
non terminal Assignment assignment;
non terminal Boolean bool_t;
non terminal Valor rvalue;
non terminal String lvalue;
non terminal case_statement;
non terminal do_statement;
non terminal Double float_result;
non terminal String string_result;
non terminal Integer int_result;

precedence left EXP_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, MUL_ASSIGN, DIV_ASSIGN,ASSIGN;
precedence left OR;
precedence left AND;
precedence left EQUAL,NOT_EQUAL;
precedence left GREATER,LESS,GREATER_EQUAL, LESS_EQUAL;
precedence left BIT_OR,BIT_XOR;
precedence left BIT_AND;
precedence left BIT_SHR, BIT_SHL;
precedence left PLUS, MINUS;
precedence left MUL,DIV,MOD;
precedence left COMMA;
precedence left EXP;
precedence right CRLF, SEMICOLON;
precedence left LEFT_RBRACKET,  RIGHT_RBRACKET, RIGHT_SBRACKET, LEFT_SBRACKET;




start with prog;

prog ::= expression_list:el {: 
    for(Expresion e:el){
        if(e!=null){
            Object o=e.ejecutar();
            if(o!=null){
                System.out.println(o);
            }
        }
    } 
:}
;

expression_list ::= expression:e terminator {: 
    ArrayList <Expresion>l=new ArrayList<Expresion>();
    l.add(e);
    RESULT=l;
    :}

| expression_list:el expression:e terminator  {: 
        el.add(e);
        RESULT=el;
     :}
| terminator
;

expression ::=  function_definition
| rvalue:v {: RESULT=v; :}
| if_statement:f {: RESULT=f; :}
| unless_statement:u {: RESULT=u; :} 
| while_statement:w    {: RESULT=w; :}
| do_statement:v       {: :}
| case_statement:v     {: :}
| class_block
| return_statement:v  {:  :}
;

while_statement ::=  WHILE rvalue:c CRLF while_expression_list:l END {: RESULT=new While_statement(c,l); :}
;

while_expression_list ::=  expression:e terminator {: ArrayList<Expresion> l=new ArrayList<Expresion>();
                                                       l.add(e); RESULT=l; :}
| RETRY terminator  {: RESULT=new ArrayList<Expresion>(); :}
| BREAK terminator  {: RESULT=new ArrayList<Expresion>(); :}
| while_expression_list:l expression:e terminator {: l.add(e); RESULT=l; :}
| while_expression_list:l RETRY terminator   {: RESULT=l; :}
| while_expression_list:l BREAK terminator   {: RESULT=l; :}
;




unless_statement ::= UNLESS rvalue:c CRLF expression_list:l1 END {: RESULT=new Unless_statement(c,l1);  :}
;



if_statement ::=  IF rvalue:c CRLF expression_list:l1 END {: RESULT=new If_statement(c,l1,null); :}
| IF rvalue:c THEN expression_list:l1 END  {: RESULT=new If_statement(c,l1,null); :}
| IF rvalue:c CRLF expression_list:l1 ELSE CRLF expression_list:l2 END {: RESULT=new If_statement(c,l1,l2); :}
| IF rvalue:c THEN expression_list:l1 ELSE expression_list:l2 END  {: RESULT=new If_statement(c,l1,l2); :}
| IF rvalue:c CRLF expression_list:l1 if_elsif_statement:els END {: RESULT=new If_statement(c,l1,null,els); :}
;

if_elsif_statement ::= ELSIF rvalue:c CRLF expression_list:l1 {: RESULT=new If_statement(c,l1,null); :}
| ELSIF rvalue:c CRLF expression_list:l1 ELSE CRLF expression_list:l2 {: RESULT=new If_statement(c,l1,l2); :}
| ELSIF rvalue:c CRLF expression_list:l1 if_elsif_statement:els {: RESULT=new If_statement(c,l1,null,els); :}
;

terminator ::= CRLF terminator | SEMICOLON terminator | SEMICOLON | CRLF
;

function_definition ::=  function_definition_header expression_list END
;

function_definition_header ::=  DEF ID_FUNCTION function_definition_params CRLF | DEF lvalue CRLF
;

function_definition_params ::=  LEFT_RBRACKET RIGHT_RBRACKET {: RESULT=new ArrayList<String>();  :}
| LEFT_RBRACKET function_definition_params_list:e1 RIGHT_RBRACKET {: RESULT=e1; :}
| function_definition_params_list:e1 {: RESULT=e1; :}
;


function_definition_params_list ::=  lvalue:s {: ArrayList <String>l=new ArrayList<String>();l.add(s);RESULT=l; :}
| function_definition_params_list:l COMMA lvalue:s {: l.add(s); RESULT=l;  :}
;

class_block ::=  REQUIRE LITERAL
;


rvalue ::= array_assignment
| int_result:s {: RESULT=new Valor(s); :}
| float_result:s {: RESULT=new Valor(s); :} 
| string_result:s {: RESULT=new Valor(s); :}
| NIL {: RESULT=new Valor(null); :}
| bool_t:s {: RESULT=new Valor(s); :} 
| assignment:a {: RESULT= a; :}
| lvalue:s {: RESULT= new Lvalue(s); :}
| lvalue:l function_call:fc {:     :}      //////////////
| BIT_NOT rvalue
| rvalue:a PLUS rvalue:b  {: Operacion o=new Operacion(a,"+",b); RESULT=o; :}
| rvalue:a MINUS rvalue:b  {: Operacion o=new Operacion(a,"-",b); RESULT=o; :}
| rvalue:a MUL rvalue:b {: Operacion o=new Operacion(a,"x",b); RESULT=o;  :}
| rvalue:a DIV rvalue:b {: Operacion o=new Operacion(a,"/",b); RESULT=o; :}
| rvalue:a MOD rvalue:b {: Operacion o=new Operacion(a,"%",b); RESULT=o; :}
| rvalue:a EXP rvalue:b {: Operacion o=new Operacion(a,"**",b); RESULT=o; :}
| rvalue BIT_SHL rvalue
| rvalue BIT_SHR rvalue
| rvalue BIT_AND rvalue
| rvalue BIT_OR rvalue
| rvalue BIT_XOR rvalue
| rvalue:a LESS rvalue:b     {: Operacion o=new Operacion(a,"<",b); RESULT=o; :}
| rvalue:a GREATER rvalue:b  {: Operacion o=new Operacion(a,"<",b); RESULT=o; :}
| rvalue:a LESS_EQUAL rvalue:b {: Operacion o=new Operacion(a,"<=",b); RESULT=o; :}
| rvalue:a GREATER_EQUAL rvalue:b {: Operacion o=new Operacion(a,">=",b); RESULT=o; :}
| rvalue:a EQUAL rvalue:b  {: Operacion o=new Operacion(a,"=",b); RESULT=o; :}
| NOT rvalue:a {: Operacion o=new Operacion(a,"!",null); RESULT=o; :}
| rvalue:a NOT_EQUAL rvalue:b {: Operacion o=new Operacion(a,"!=",b); RESULT=o; :}
| rvalue:a OR rvalue:b {: Operacion o=new Operacion(a,"||",b); RESULT=o; :}
| rvalue:a AND rvalue:b {: Operacion o=new Operacion(a,"&&",b); RESULT=o; :}
| LEFT_RBRACKET rvalue:a RIGHT_RBRACKET {:   RESULT=a; :}
;




single_object ::= INT
| FLOAT :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| LITERAL:e1 {: System.out.println(e1+" LITERAL"); :}
| FALSE :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| TRUE :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| NIL :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
;

return_statement ::=  RETURN rvalue:v {:  :}
;



lvalue ::= ID_GLOBAL:e1 {: RESULT=e1; :}
| ID:e1 {: RESULT=e1; :}
| ID:id DOT ID_FUNCTION:idf {: 
            /*
                Objeto o=(Objeto)tablaSimbolos.get(id);
                Funcion f=o.getFuncion(idf);
                f.ejecutar();
            */
 :}
| ID_FUNCTION:e1 {: RESULT=e1; :}
;

array_assignment ::= rvalue array_definition ASSIGN rvalue
| lvalue ASSIGN array_definition
;

array_definition ::= LEFT_SBRACKET array_definition_elements RIGHT_SBRACKET
| LEFT_SBRACKET RIGHT_SBRACKET
;

array_definition_elements ::= lvalue COMMA array_definition_elements
| single_object COMMA array_definition_elements
| single_object
| lvalue
;

when_statement ::= WHEN array_definition_elements CRLF expression_list
| WHEN array_definition_elements CRLF expression_list when_statement
| WHEN array_definition_elements CRLF
| ELSE CRLF expression CRLF
;

int_result ::= int_result:a MUL int_result:b {: RESULT=a*b; :}
| int_result:a DIV int_result:b  {: RESULT=a/b; :}
| int_result:a MOD int_result:b {: RESULT=a%b; :}
| int_result:a PLUS int_result:b {: RESULT=a+b; :}
| int_result:a MINUS int_result:b {: RESULT=a-b; :}
| INT:i {: RESULT=i;  :}
;

string_result ::= string_result:s MUL int_result:n
                                    {: String aux="";
                                       for(int i=0;i++<n;aux+=s); 
                                       RESULT=aux; :}
| int_result:n MUL string_result:s 
{:  String aux="";
                                       for(int i=0;i++<n;aux+=s); 
                                       RESULT=aux; :}
| LITERAL:s {: RESULT=s; :} 
;

float_result ::= float_result:f MUL float_result:f2 {: RESULT=f*f2; :}
| float_result:f DIV float_result:f2 {: RESULT=f/f2; :}
| float_result:f MOD float_result:f2  {: RESULT=f%f2; :}
| int_result:i MUL float_result:f {: RESULT=i*f; :}
| int_result:i DIV float_result:f {: RESULT=i/f; :}
| int_result:i MOD float_result:f {: RESULT=i%f; :}
| float_result:f MUL int_result:i {: RESULT=f*i; :}
| float_result:f DIV int_result:i {: RESULT=f/i; :}
| float_result:f MOD int_result:i {: RESULT=f%i; :}
| float_result:f PLUS float_result:f2 {: RESULT=f+f2; :}
| float_result:f MINUS float_result:f2  {: RESULT=f-f2; :}
| int_result:i PLUS float_result:f  {: RESULT=i+f; :}
| int_result:i MINUS float_result:f  {: RESULT=i-f; :}
| float_result:f PLUS int_result:i  {: RESULT=f+i; :}
| float_result:f MINUS int_result:i {: RESULT=f-i; :}
| FLOAT:f {: RESULT=f; :}
;

assignment ::= lvalue:s PLUS_ASSIGN rvalue:e {: 
:}  
| lvalue:s  MINUS_ASSIGN rvalue:e {: 
:}  
| lvalue:s  MUL_ASSIGN rvalue:e {: 
:}  
| lvalue:s  DIV_ASSIGN rvalue:e {: 


:}  
| lvalue:s MOD_ASSIGN rvalue:e  {: 


 :}  
| lvalue:s EXP_ASSIGN rvalue:e  {: 


 :}  
| lvalue:s ASSIGN rvalue:v      {:  
    RESULT=new Assignment(s,v);
 :}  
;

function_call ::= LEFT_SBRACKET function_definition_params:f RIGHT_SBRACKET {:  :}
| function_definition_params:f {:  :}
| LEFT_SBRACKET RIGHT_SBRACKET
;

bool_t ::= TRUE {: RESULT=new Boolean(true); :} | FALSE {: RESULT=new Boolean(false); :}
;

case_statement ::= CASE lvalue CRLF when_statement END  {:  :}
;

do_statement ::= lvalue:c DO ID_ITER expression_list:l END {:  :}
;



